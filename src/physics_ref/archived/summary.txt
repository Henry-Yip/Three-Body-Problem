particle3D (contains mass, position, velocity)
    kinetic energy
        0.5 * mass * (linalg.norm(velocity) ** 2)
    momentum
        mass * velocity
    update_position_1st
        position += dt * velocity
    update_position_2nd
        position += dt * velocity +  (dt ** 2) * (force / (2 * mass))
    update_velocity
        velocity += dt * force / mass
    update_position_symplectic
        position += d_coeff * dt * velocity
    update_velocity_symplectic
        velocity += c_coeff * dt * force / mass
    update_position_euler
        position += dt * velocity
    velocity_euler
        velocity += dt * force / mass
    read_line
        returns a particle3D
    total_kinetic_energy
        sum([p.kinetic_energy() for p in particles])
    com_velocity
        sum([p.momentum() for p in particles]) / sum([p.mass for p in particles])

compute_separations
    